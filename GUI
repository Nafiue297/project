import tkinter as tk
from tkinter import filedialog, messagebox, ttk
from PIL import Image, ImageTk
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from logic.kmeans_custom import KMeans

class CustomerSegmentationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Customer Segmentation System")
        self.root.geometry("900x650")

        self.data = None
        self.filename = ""
        self.result_text = None

        # === Background ===
        bg_path = os.path.join("assets", "bg.jpg")
        if os.path.exists(bg_path):
            bg_img = Image.open(bg_path).resize((900, 650))
            self.bg_photo = ImageTk.PhotoImage(bg_img)
            bg_label = tk.Label(root, image=self.bg_photo)
            bg_label.place(relwidth=1, relheight=1)

        # === Title (direct on background) ===
        tk.Label(root,
                 text="ðŸ“Š Customer Segmentation",
                 font=("Helvetica", 18, "bold"),
                 fg="white", bg="#000000", padx=10, pady=5).place(relx=0.5, rely=0.1, anchor="center")

        # === Upload button ===
        ttk.Button(root, text="Upload Customer CSV", command=self.upload_csv).place(relx=0.5, rely=0.2, anchor="center")

        # === K input ===
        tk.Label(root, text="Enter number of clusters (K):", font=("Helvetica", 10),
                 bg="#000000", fg="white").place(relx=0.5, rely=0.26, anchor="center")

        self.k_entry = ttk.Entry(root, width=10)
        self.k_entry.insert(0, "3")
        self.k_entry.place(relx=0.5, rely=0.30, anchor="center")

        # === Run clustering button ===
        ttk.Button(root, text="Run Clustering", command=self.run_clustering).place(relx=0.5, rely=0.36, anchor="center")

    def upload_csv(self):
        file_path = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
        if file_path:
            try:
                df = pd.read_csv(file_path)
                self.filename = file_path
                self.data = df.select_dtypes(include=[np.number])
                messagebox.showinfo("Success", f"âœ” {len(df)} records loaded from CSV!")
            except Exception as e:
                messagebox.showerror("Error", str(e))

    def run_clustering(self):
        if self.data is None:
            messagebox.showwarning("No Data", "Please upload a CSV file first.")
            return

        try:
            k = int(self.k_entry.get())
        except ValueError:
            messagebox.showerror("Invalid Input", "Please enter a valid integer for K.")
            return

        model = KMeans(k=k)
        model.fit(self.data.values)
        labels = model.labels_
        centroids = model.centroids

        df = pd.read_csv(self.filename)
        df['Cluster'] = labels

        # === Clustering Plot (in new window) ===
        fig, ax = plt.subplots(figsize=(8, 6))
        colors = ['blue', 'orange', 'green', 'red', 'purple', 'cyan', 'brown', 'pink', 'gray', 'olive']

        for cluster_id in np.unique(labels):
            cluster_points = self.data.values[labels == cluster_id]
            ax.scatter(cluster_points[:, 0], cluster_points[:, 1],
                       color=colors[cluster_id % len(colors)],
                       label=f"Cluster {cluster_id + 1}", s=40)

        for idx, centroid in enumerate(centroids):
            ax.scatter(centroid[0], centroid[1], s=250, c='yellow', marker='X',
                       edgecolor='black', label="Centroids" if idx == 0 else "")

        ax.set_xlabel(self.data.columns[0])
        ax.set_ylabel(self.data.columns[1])
        ax.set_title("Customer Segmentation using Raw K-Means")
        ax.legend(loc="lower right", fontsize=9)
        ax.grid(True)
        plt.tight_layout()
        plt.show()

        # === Cluster Summary Output ===
        if self.result_text:
            self.result_text.destroy()

        summary = df.groupby("Cluster").mean(numeric_only=True)
        self.result_text = tk.Text(self.root, height=10, width=100, font=("Courier", 10), bg="#fefefe")
        self.result_text.place(relx=0.5, rely=0.75, anchor="center")
        self.result_text.insert(tk.END, "ðŸ“‹ Cluster Summary:\n\n")
        self.result_text.insert(tk.END, summary.to_string())
